#include "Hooks.hpp"
#include "Memory.hpp"

#include <stdio.h>
#include <string>

bool Hooks::Initialize( )
{
	if ( MH_Initialize( ) != MH_OK )
		return false; 
	/*
		Initialize minhook
	*/

	void* Host_IsSecureServerAllowed		= reinterpret_cast< void* >( Memory::PatternScanModule( GetModuleHandleA( "engine.dll" ), "56 8B 35 ? ? ? ? FF D6 68 ? ? ? ? 8B C8 8B 10 FF 52 2C 85 C0 75 2B" ) );
	void* Host_DisallowSecuredServers		= reinterpret_cast< void* >( Memory::PatternScanModule( GetModuleHandleA( "engine.dll" ), "80 3D ? ? ? ? ? 74 26 8B 0D ? ? ? ?" ) );


	if ( MH_CreateHook( Host_IsSecureServerAllowed, &Funcs::hkHost_IsSecureServerAllowed, 0 ) != MH_OK )
		return false;
	else
		printf_s( "Hooked hkHost_IsSecureServerAllowed!\n" );

	if ( MH_CreateHook( Host_DisallowSecuredServers, &Funcs::hkHost_DisallowSecureServers, 0 ) != MH_OK )
		return false;
	else
		printf_s( "Hooked hkHost_DisallowSecuredServers!\n" );

	if ( MH_EnableHook( MH_ALL_HOOKS ) != MH_OK )
	{
		printf_s( "Failed to enable hooks!\n" );
		return false;
	}

	return true;
}

bool Hooks::Funcs::hkHost_IsSecureServerAllowed( )
{
	printf_s( "Attempting to join a secured server...\n" );
	return true;
}

void Hooks::Funcs::hkHost_DisallowSecureServers( )
{
	printf_s( "Blocking valves auto kick...\n" );
	return;
}
