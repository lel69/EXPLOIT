#include "Hooks.hpp"
#include "Memory.hpp"

#include <stdio.h>
#include <string>

bool Hooks::Initialize( )
{
	if ( MH_Initialize( ) != MH_OK )
		return false; 
	/*
		Initialize minhook
	*/

	void* Host_IsSecureServerAllowed		= reinterpret_cast< void* >( Memory::PatternScanModule( GetModuleHandleA( "engine.dll" ), "56 8B 35 ? ? ? ? FF D6 68 ? ? ? ? 8B C8 8B 10 FF 52 2C 85 C0 75 2B" ) );
	void* Host_DisallowSecuredServers		= reinterpret_cast< void* >( Memory::PatternScanModule( GetModuleHandleA( "engine.dll" ), "80 3D ? ? ? ? ? 74 26 8B 0D ? ? ? ?" ) );
	void* Host_ProessConnectionlessPacket	= reinterpret_cast< void* >( Memory::PatternScanModule( GetModuleHandleA( "engine.dll" ), "55 8B EC 83 E4 F0 81 EC ? ? ? ? 56 57 8B F9 8B 4D 08" ) );


	if ( MH_CreateHook( Host_IsSecureServerAllowed, &Funcs::hkHost_IsSecureServerAllowed, 0 ) != MH_OK )
		return false;
	else
		printf_s( "Hooked hkProcessConnectionlessPacket!\n" );

	if ( MH_CreateHook( Host_DisallowSecuredServers, &Funcs::hkHost_DisallowSecureServers, 0 ) != MH_OK )
		return false;
	else
		printf_s( "Hooked hkHost_DisallowSecuredServers!\n" );

	if ( MH_CreateHook( Host_ProessConnectionlessPacket, &Funcs::hkProcessConnectionless, 0 ) != MH_OK )
		return false;
	else
		printf_s( "Hooked hkHost_ProcessConnectionless!\n" );

	if ( MH_EnableHook( MH_ALL_HOOKS ) != MH_OK )
	{
		printf_s( "Failed to enable hooks!\n" );
		return false;
	}

	return true;
}

bool Hooks::Funcs::hkHost_IsSecureServerAllowed( )
{
	printf_s( "Attempting to join a secured server...\n" );
	return true;
}

void Hooks::Funcs::hkHost_DisallowSecureServers( )
{
	printf_s( "Blocking valves auto kick...\n" );
	return;
}

bool __fastcall Hooks::Funcs::hkProcessConnectionless( void* ecx, void* edx, void* pPacket )
{
	netpacket_s* packet = ( netpacket_s* ) pPacket;
	char cPacketHeader = NULL;
	if ( packet ) {
		cPacketHeader = *( char* ) ( packet + 68 ); //  ExtractHeader((DWORD*)packet);
		if ( cPacketHeader ) {
			printf_s( ( "CBaseClientState::ProcessConnectionlessPacket Packet Recieved, Header == " + std::to_string( cPacketHeader ) ).c_str( ) );
		}
		else {
			printf_s( "CBaseClientState::ProcessConnectionlessPacket Packet Recieved, Header Is NULL (0)!" );
		}
	}
	else {
		printf_s( "CBaseClientState::ProcessConnectionlessPacket Recieved nullptr for packet!" );
	}

	return oProcessConnectionless( ecx, packet );
}
